version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: oauth2_postgres
    environment:
      POSTGRES_DB: oauth2_auth
      POSTGRES_USER: oauth2_user
      POSTGRES_PASSWORD: oauth2_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/app/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - oauth2_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U oauth2_user -d oauth2_auth"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Temporal Server
  temporal:
    image: temporalio/auto-setup:1.22.6
    container_name: oauth2_temporal
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=oauth2_user
      - POSTGRES_PWD=oauth2_password
      - POSTGRES_SEEDS=postgres
      - ENABLE_ES=false
      - SKIP_SCHEMA_SETUP=false
    ports:
      - "7233:7233"
    networks:
      - oauth2_network
    healthcheck:
      test: ["CMD", "tctl", "--address", "temporal:7233", "cluster", "health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: oauth2_backend
    depends_on:
      postgres:
        condition: service_healthy
      temporal:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://oauth2_user:oauth2_password@postgres:5432/oauth2_auth
      - TEMPORAL_HOST=temporal:7233
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=7
      - SMTP_SERVER=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USERNAME=your-email@gmail.com
      - SMTP_PASSWORD=your-app-password
      - FRONTEND_URL=http://localhost:3000
      - BACKEND_URL=http://localhost:8000
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    networks:
      - oauth2_network
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # Temporal Worker
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: oauth2_worker
    depends_on:
      postgres:
        condition: service_healthy
      temporal:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://oauth2_user:oauth2_password@postgres:5432/oauth2_auth
      - TEMPORAL_HOST=temporal:7233
      - SMTP_SERVER=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USERNAME=your-email@gmail.com
      - SMTP_PASSWORD=your-app-password
      - FRONTEND_URL=http://localhost:3000
    volumes:
      - ./backend:/app
    networks:
      - oauth2_network
    command: ["python", "worker.py"]

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: oauth2_frontend
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_CLIENT_ID=oauth2-client
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - oauth2_network
    command: ["npm", "start"]

  # Temporal Web UI
  temporal-ui:
    image: temporalio/ui:2.35.0
    container_name: oauth2_temporal_ui
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    ports:
      - "8081:8080"
    networks:
      - oauth2_network

networks:
  oauth2_network:
    driver: bridge

volumes:
  postgres_data: